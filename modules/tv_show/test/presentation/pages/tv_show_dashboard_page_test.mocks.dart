// Mocks generated by Mockito 5.3.2 from annotations
// in tv_show/test/presentation/pages/tv_show_dashboard_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:bloc/bloc.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tv_show/presentation/blocs/now_airing_tv_shows/now_airing_tv_shows_bloc.dart'
    as _i2;
import 'package:tv_show/presentation/blocs/popular_tv_shows/popular_tv_shows_bloc.dart'
    as _i3;
import 'package:tv_show/presentation/blocs/top_rated_tv_shows/top_rated_tv_shows_bloc.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNowAiringTvShowsState_0 extends _i1.SmartFake
    implements _i2.NowAiringTvShowsState {
  _FakeNowAiringTvShowsState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePopularTvShowsState_1 extends _i1.SmartFake
    implements _i3.PopularTvShowsState {
  _FakePopularTvShowsState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTopRatedTvShowsState_2 extends _i1.SmartFake
    implements _i4.TopRatedTvShowsState {
  _FakeTopRatedTvShowsState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NowAiringTvShowsBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockBlocType1 extends _i1.Mock implements _i2.NowAiringTvShowsBloc {
  @override
  _i2.NowAiringTvShowsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeNowAiringTvShowsState_0(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeNowAiringTvShowsState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.NowAiringTvShowsState);
  @override
  _i5.Stream<_i2.NowAiringTvShowsState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i2.NowAiringTvShowsState>.empty(),
        returnValueForMissingStub:
            _i5.Stream<_i2.NowAiringTvShowsState>.empty(),
      ) as _i5.Stream<_i2.NowAiringTvShowsState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void add(_i2.NowAiringTvShowsEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i2.NowAiringTvShowsEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i2.NowAiringTvShowsState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i2.NowAiringTvShowsEvent>(
    _i6.EventHandler<E, _i2.NowAiringTvShowsState>? handler, {
    _i6.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i6.Transition<_i2.NowAiringTvShowsEvent, _i2.NowAiringTvShowsState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  void onChange(_i6.Change<_i2.NowAiringTvShowsState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PopularTvShowsBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockBlocType2 extends _i1.Mock implements _i3.PopularTvShowsBloc {
  @override
  _i3.PopularTvShowsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakePopularTvShowsState_1(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakePopularTvShowsState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.PopularTvShowsState);
  @override
  _i5.Stream<_i3.PopularTvShowsState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i3.PopularTvShowsState>.empty(),
        returnValueForMissingStub: _i5.Stream<_i3.PopularTvShowsState>.empty(),
      ) as _i5.Stream<_i3.PopularTvShowsState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void add(_i3.PopularTvShowsEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i3.PopularTvShowsEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i3.PopularTvShowsState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i3.PopularTvShowsEvent>(
    _i6.EventHandler<E, _i3.PopularTvShowsState>? handler, {
    _i6.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i6.Transition<_i3.PopularTvShowsEvent, _i3.PopularTvShowsState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  void onChange(_i6.Change<_i3.PopularTvShowsState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TopRatedTvShowsBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockBlocType3 extends _i1.Mock implements _i4.TopRatedTvShowsBloc {
  @override
  _i4.TopRatedTvShowsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeTopRatedTvShowsState_2(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeTopRatedTvShowsState_2(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.TopRatedTvShowsState);
  @override
  _i5.Stream<_i4.TopRatedTvShowsState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i4.TopRatedTvShowsState>.empty(),
        returnValueForMissingStub: _i5.Stream<_i4.TopRatedTvShowsState>.empty(),
      ) as _i5.Stream<_i4.TopRatedTvShowsState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void add(_i4.TopRatedTvShowsEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i4.TopRatedTvShowsEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i4.TopRatedTvShowsState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i4.TopRatedTvShowsEvent>(
    _i6.EventHandler<E, _i4.TopRatedTvShowsState>? handler, {
    _i6.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i6.Transition<_i4.TopRatedTvShowsEvent, _i4.TopRatedTvShowsState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  void onChange(_i6.Change<_i4.TopRatedTvShowsState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
